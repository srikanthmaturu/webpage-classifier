mime version server cern date monday jan gmt content type text html content length last modified friday nov gmt cs introduction graduate computer science cs introduction graduate computer science fall lecture monday tay instructor robert blumofe office taylor phone email rdb cs utexas edu office hours thursday feel free stop time one semester seminar course taken pass fail basis graduate students course cs introduction graduate computer science undergraduates course cs undergraduate topics computer science honors receive credit course student must registered course attend least lectures schedule speaker title september dan miranker alamo net data warehouse september ben kuipers spatial semantic hierarchy human robot cognitive maps september robert blumofe cilk cilk adaptive reliable parallel computing networks workstations september risto miikkulainen learning sequential decision tasks symbiotic evolution neural networks october vladimir lifschitz mathematical principles logic programming october paul wilson extensible languages open compilers reflection october ray mooney learning process natural language using inductive logic programming october mike dahlin distributed o clusters internets november gordon novak software reuse specialization generic procedures views november vijaya ramachandran design evaluation parallel algorithms november lorenzo alvisi lighweight fault tolerance november calvin lin adaptive libraries high level optimization december greg plaxton analysis algorithms lighweight fault tolerance lorenzo alvisi distributed systems moved beyond confines academia research labs revolutionizing way businesses governmental organizations simple citizens processing collecting information current technological trends promise dramatically increase pace revolution enabling design highly cooperative distributed applications go beyond client server paradigm harness computational power distributed systems new environment scope emphasis fault tolerant techniques undergo dramatic changes fault tolerance cease expensive feature required handful applications tolerate exotic failures users highly distributed information infrastructure fault tolerance translate competitive advantage guaranteeing reliable access critical information talk explore new way design engineer fault tolerant solutions call lightweight fault tolerance goals lightweight fault tolerance require dedicated resources negligible impact performance failure free executions scale cost depending severity number failures need tolerated integrate applications way transparent application programmer enable support emerging applications communicate messages well files address software generated faults effectively cilk cilk adaptive reliable parallel computing networks workstations robert blumofe presentation overviews cilk pronounced silk algorithmic parallel multithreaded language cilk runtime system supports functional subset cilk networks workstations cilk provides adaptive parallelism fault tolerance tranparently user programs adaptive parallelism means set workstations cilk program runs grow shrink dynamically depending availability idle workstations amount parallelism within program addition cilk program continue execution even one workstations crashes cilk runtime system automatically detects recovers failures presentation includes live demonstration distributed o clusters internets mike dahlin presentation gives overview current issues distributed file system o technology trends new applications motivate aggressive cluster wide area network o systems clusters fast networks allow machines cooperate closely service o requests xfs file system uses close cooperation among nodes provide better performance availability single central server wide area networks challenge provide good performance availability consistency despite limited network performance node network failures wfs file system project explore issues spatial semantic hierarchy human robot cognitive maps benjamin kuipers human cognitive maps rely several different representations large scale space ontology similarly variety different approaches proposed robot exploration mapping unknown environments cast diverse representations natural structure call spatial semantic hierarchy ssh objects relations assumptions level abstracted levels level ssh mathematical foundation control level allows robot environment formalized continuous dynamical system whose stable equilibrium points abstracted discrete set distinctive states trajectories linking states abstracted actions giving discrete causal graph representation state space causal graph states actions turn abstracted topological network places paths local metrical models occupancy grids neighborhoods places paths built framework topological network without usual problems global consistency mathematical principles logic programming vladimir lifschitz logic programming well sister approach functional programming based view computer program need contain explicit operational instructions instead simply provide set facts problem sufficient solve declarative program executed using methods automated reasoning prolog best known logic programming language mathematical theory logic programming concerned defining semantics logic programming languages describing reasoning algorithms used implement investigating soundness algorithms adaptive libraries high level optimization calvin lin talk describes new approach building software libraries making libraries adapt implementation interfaces different application needs different hardware platforms produce libraries efficient widely usable describe new framework building libraries describe three planned experiments apply techniques libraries parallel scientific computation explain approach facilitates high level optimizations learning sequential decision tasks symbiotic evolution neural networks risto miikkulainen novel reinforcement learning method called sane symbiotic adaptive neuro evolution evolves population neurons genetic algorithms form neural network given task symbiotic evolution promotes cooperation specialization population results fast efficient genetic search discourages convergence suboptimal solutions sane able extract domain specific information even sparse reinforcement makes effective approach broad range sequential decision tasks robot control game playing resource management alamo net data warehouse dan miranker alamo effort directed intra net development inter net users enumerate interesting sites data sources goal integrate data sources provide user illusion single virtual database followed query analysis presentation tools central alamo architecture software bus called abstract search machine asm asm corba compliant interface provides uniform interface heterogeneous data sources beyond simple data access asm embodies higher level abstraction enabling efficient coding clever search algorithms separating isolating system concerns including buffering data prefetch broad claim high performance often optimal implementations advanced database facilities object oriented query engine deductive inference engine active database engine data mining facilities constructed using asm common interface finally since output advanced database facilities serve data sources components alamo architecture composed resolve higher level data integration problems particular anticipate using elements alamo represent meta data resolve structural semantic conflicts among data sources ultimately compositions embody complex knowledge bases able answer high level queries learning process natural language using inductive logic programming raymond j mooney inductive logic programming ilp addresses problem learning prolog programs examples representational power first order logic offers advantages standard machine learning methods constrained use fixed length feature vectors applying ilp methods natural language learning believe richer representation offers important advantages developed ilp system chill learning deterministic parsers corpus parsed sentences chill obtains superior results several artificial corpora previously used test neural network methods encouraging results realistic atis corpus airline queries chill also used automatically develop complete natural language interface translates english database queries executable prolog form producing accurate parser hand built system querying small geographic database also developed ilp system foidl applied learning past tense english surpassing previous results neural network decision tree methods problem software reuse specialization generic procedures views gordon novak jr software reuse clearly good idea difficult achieve practice data fit assumptions software reusing software difficult approach views describe application data types implement abstract types used generic procedures compilation process specialize generic procedure produce version customized application data graphical user interfaces make easy specify views automatic programming server implemented world wide web write specialized programs user desired language serve source code user file analysis algorithms greg plaxton major focus theoretical computer science design analysis asymptotically efficient algorithms sequential parallel distributed deterministic randomized specific computational problems research area uncommon come across well written papers informally main underlying ideas conceptually straightforward ii formal presentation surprisingly lengthy iii formalism deals minor side issues special cases little nothing main underlying ideas papers seems significant gap conceptual formal difficulty algorithm presented gaps inherent conventional mathematical notation simply inadequate succinctly formalizing certain conceptually straightforward algorithmic ideas talk describe notation asymptotic analysis called o notation significantly reduces conceptual formal gap associated non trivial class algorithms concrete example consider analysis well known linear time selection algorithm due blum floyd pratt rivest tarjan design evaluation parallel algorithms vijaya ramachandran design analysis efficient parallel algorithms combinatorial problems area extensive study recent years large number algorithms developed abstract pram model parallel computation talk describe work design efficient parallel algorithms experience implementing evaluating algorithms massively parallel machine maspar mp describe queuing variant pram model propose appropriate model currently available parallel shared memory machines traditional pram models extensible languages open compilers reflection paul wilson extensible languages allow interesting new features added language portably within language open compilers allow fairly easy modification compilers add new features analyses optimizations reflection allows program examine representation interesting parts affect structure accordingly ll discuss things re useful building modular portable adapatable software ll also discuss recent work rscheme compiler open compiler extensible language last modified november robert blumofe rdb cs utexas edu