date tue nov gmt server apache content type text html content length last modified mon nov gmt cis principle programming languages cis principle programming languages instructor gtf textbook packets grade policy exams course objetives schedule announcements lectures assignments instructor gtf instructor zena ariola room x ariola cs http www cs uoregon edu ariola office hours uh appointment gtf yong xiao room x xiao cs office hours m w appointment tutorial hours u des textbook packets textbook programming languages concepts constructs ravi sethi addison wesley packets introduction standard ml lecture notes grading policy written assignments account grade midterm count final examination problem sets solved groups two three due class one copy per group day indicated problem set handout midterm final exams midterm exam nov esslinger final exam dec willamette hall course objectives main goal course introduce different aspects programming languages including features type systems programming style implementation consider th traditional programming languages c pascal recent languages ml java become expert programmer languages taught class however gain necessary skills understand impact language features implementation abstractions provide example able understand java gained much interest academic industrial arena cover different programming paradigms paradigm provides different way solve problem part assignments required program c ml prolog specifically topics covered compilation vs interpretation advantages disadvantages terms speed execution memory space overview structure compiler syntax legal expressions concepts context free grammars bnf grammars parse trees ambiguity abstract syntax trees lexical analyzer parser imperative programming cobol fortran c pascal ada closest model machine architecture concepts side effects types static dynamic weak strong scope static dynamic parameter passing techniques call value call refence call value result call name aliasing block structured languages run time structures stacks vs heap garbage collection object oriented programming c java eiffel support programming lage concepts abstraction encapsulation information hiding inheritance subtyping functional programming scheme ml haskell miranda id gopher based mathematics gives theoretical foundation concepts strict vs non strict functions higher order functions currying lazy vs eager evaluation innermost vs outermost evaluation type inference type checking overloading coercion polymorphism pattern matching logic programming prolog important database query languages concept relations vs functions facts rules goals unification backtracking cuts time allows us also study current techniques specifying semantics e meaning programming language need master techniques want reason properties programs schedule introduction tuesday introduction ch thursday compilers vs interpreter ch tuesday syntactic structure imperative programming thursday control abstraction data abstraction ch tuesday types thursday parameter passing techniques ch tuesday storage management thursday scope rules object oriented programming tuesday abstraction ch thursday encapsulation ch except tuesday information hiding thursday java functional programming tuesday features functional languages ch thursday typed language ml ch packet tuesday polymorphism ml types exceptions thursday untyped language scheme ch tuesday data programs logic programming tuesday logic control ch thursday prolog maintainer page yong xiaoemail xiao cs uoregon edu