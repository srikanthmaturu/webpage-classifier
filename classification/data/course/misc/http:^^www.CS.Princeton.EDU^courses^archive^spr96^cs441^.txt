server netscape commerce date wednesday nov gmt last modified monday apr gmt content length content type text html princeton cs programming languages spring princeton cs programming languages spring home page image borrowed indiana c page courtesy erik hilsdale overview class information textbooks syllabus lecture notes assignments tools examinations acknowledgments overview course provides introduction principles underlying design modern legacy programming languages developing series interpreters study various characteristics programming languages students obtain deep understanding language semantics understanding provides firm basis selecting language particular task graduate study programming languages compilers lesser degree course also cover programming paradigms implementation concerns formal specification programming language semantics previous cs courses princeton taught using kamin book involved writing interpreters pascal course similar content developing interpreters scheme scheme better suited task using scheme give students first hand experience advanced programming language course topics academic calendar principles theory implementation modern programming languages name binding macros parameter passing closures continuations coroutines objects types modules representation independence compilation transformation lambda calculus operational semantics denotational semantics class information instructor andrew wright room princeton x nec wright research nj nec com office hours class appointment via email ta paul martino room x ahpah cs princeton edu office hours tuesday pm lecture hours tuesday thursday room web page page http www cs princeton edu courses cs local newsgroup pu cs grading midterm final exam assignments scheme quiz textbooks required essentials programming languages friedman wand haynes mcgraw hill isbn chapter six textbook date get updated chapter six postscript format also draft chapter types type inference recommended little schemer friedman felleisen mit press isbn older book called little lisper find used one seasoned schemer friedman felleisen mit press isbn x tentative syllabus spring week feb introduction scheme little schemer chapters induction recursion scope eopl chapter static properties programs eopl chapters week feb syntactic abstraction data abstraction eopl chapter advanced scheme seasoned schemer chapters interpreters seasoned schemer chapter eopl chapter scheme quiz material week feb week feb representation independence dynamic scope eopl chapter parameter passing eopl chapter week feb continuation passing style eopl chapter seasoned schemer chapters week march continuation passing interpreters eopl chapter week march review midterm exam week march ski week lectures week march imperative form registerization eopl chapter week april garbage collection formal semantics week april type systems week april module systems week april object systems week april whatever left logic programming may may reading period may may final exams last possible due date take home may lecture notes lecture notes class typeset appear online one two days class lecture notes assignments one assignment due week assignments involve implementing language facility interpreter assignments available thursday due following thursday beginning class solutions discussed class assignments collected hence late assignments accepted solutions also posted online assignments graded content style style specific meaning become clear class since two points per assignment grades simple right close wrong assignments solutions tools scheme important tool useful scheme links r rs scheme definition mit scheme scheme home page mit indiana scheme repository using mit scheme course useful things know mit scheme get started type scheme shell start scheme read eval print loop type definitions expressions interactively load files using load file scm even familiar emacs may want first assignment way alternatively run scheme emacs interpreters ll building course need install extensions scheme even run scheme emacs probably want edit scheme programs using emacs nice automatic indentation facilities better indentation style default enabled placing setq load path cons u cs emacs load path file called emacs home directory examinations following tentative schedule cs examinations scheme quiz class week feb midterm exam week march final exam may may study guide final exam acknowledgments course combines ideas structure essentials programming languages c indiana university taught dan friedman cs rice university taught matthias felleisen andrew wright nec research institute wright research nj nec com