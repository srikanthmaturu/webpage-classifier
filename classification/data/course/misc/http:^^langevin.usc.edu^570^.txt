date wed nov gmt server ncsa content type text html csci analysis algorithms computer science analysis algorithms home page computer science analysis algorithms spring class taught prof doug ierardi handouts exams problem sets may found linked documents futher information including course notes former exams handouts computer science may currently found course directory csci scf usc edu ll note may find algorithms course materials net web page valuable interesting grades handouts syllabus red black trees leftist heaps amortized analysis including skew heaps splay trees competative analysis online algorithms assignments problem set due january solutions problem set binary heaps binomial heaps red black trees problem implementing decreasekey handout leftist heaps due february solutions problem set show movetofront c competitive c lt e tight bound give tight bound competitiveness lru caching problem assuming cache hold k pages re counting number cache misses read read fun problems due monday february th solutions problem set skip list constructed follows every element pointer level connects sorted linked list subset elements level level pointers connect sorted linked list structure constructed follows suppose re given list insert next element x list search goes level list splice flip tails add x list level sketch proof resulting list height o lg n high probability assuming probability heads p p o lg n time suppose access biased coin unknown bias althogh probability heads strictly show use coin simulate fair coin suppose give piece paper n lines drawn across surface re arbitrarily oriented goes edge edge dot drawn somewhere paper representing origin repeat following choose one remaining lines random cut paper along hold onto piece dot origin throw rest away repeat lines cut re left smallest convex region containing origin bounded given line segments fact throughout process total number times cut across remaining lines expected o n ln n use fact design algorithm given n half planes containing origin computes intersection expected time o n lg n incrementally adding one half plane time recall description treaps given class briefly every element key priority put binary tree inorder ordering binary search tree property respect keys heap ordering respect priorities random treap one priorities assigned randomly problem ll assume prioirities given random permutation let x element set ancestors x random treap let x length path root x x keys x use obvious fact give precise value expected depth x x mth largest element tree e solve leading constants well tack o end d like recall insert element proceed binary search tree attach random priority rotate tree heap ordering restored argue expected number rotations insertion deletion treap handled rather odd way delete x rotate tree leaf remove describe procedure detail show expected number rotations due monday march th solutions problem set also consider following variant optimization problem find match minimizes number characters matched gap characters suggestions came times class graph review due thursday april th solutions exams take home midterm exam take home final exam available html postscript demos java enhanced browser check interactive binary search tree demos dj ierardi langevin usc edu mon may pm