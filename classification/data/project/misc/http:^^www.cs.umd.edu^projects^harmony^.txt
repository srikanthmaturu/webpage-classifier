date wed nov gmt server apache ssl b content type text html content length last modified mon nov gmt active harmony active harmony discussion group links complex software systems today characterized distribution heterogeneity changing resource requirements capacities attributes make static systems unsuitable wide range tasks need high performance long lived order achieve high performance environments short period time systems need dynamically adapt changing resource capacities application requirements designing building active harmony software architecture supports distributed execution computational objects environments following innovations dynamic execution environment dynamic adaptation network resource capacities computational objects created application requirements resource capacities change active harmony attempt maximize data affinity load balancing intelligent resource allocation object migration automatic application adaptation framework permits runtime adaptation algorithms data distribution load balancing active harmony export detailed metric interface applications allowing access processor network operating system parameters applications export tuning options system automatically optimize resource allocation measurement tuning therefore become first class objects programming model programmers write applications include ways adapt computation observed performance changing conditions shared data interfaces active harmony support shared memory semantics among computational objects regardless location allowing peer peer client server computations exploit simplified programming model fine grained sharing permitted traditional shared memory environments innovations include support heterogeneity data emph program code multi level security scheme adapts data code interfaces degree trust computational objects support dynamic execution environment unique aspect active harmony work emphasis adapting heterogeneous changing environments researchers studied constituent issues plan address emphasis inter relationships objects system primary result research infrastructure set algorithms permit global resource optimization changing conditions project members dr jeff hollingsworth dr pete keleher discussion group forming reading discussion group investigate issues check back later week details papers partial list exploiting process lifetime distributions dynamic load balancing effective distributed scheduling parallel workloads interaction parallel sequential workloads network workstations using runtime measured workload characteristics parallel processor scheduling open questions fastest sequential process migration appropriate parallel applications e process state moved prior re scheduling parallel application scheduling parallel client server applications take data affinity account co scheduling important care latency throughput co scheduling perform move local networks internets last updated november