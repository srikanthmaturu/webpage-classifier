date wed nov gmt server apache ssl b content type text html content length last modified sat jun gmt maruti project department computer science university maryland college park maryland u index maruti release announcement recent publications recent accomplishments maruti background maruti design goals design approach principles maruti personnel maruti system architecture background purpose maruti project create environment development deployment critical applications hard real time constraints reactive environment applications must able execute platform consisting distributed heterogeneous resources operate continuously presence faults maruti project started first version system designed object oriented system suitable extensions objects support real time operation proof concept version design implemented run top unix operating system supported hard non real time applications running distributed heterogeneous environment feasibility fault tolerant concepts incorporated design maruti system also demonstrated changes unix kernel made implementation operational realized unix hospitable host real time applications little control use resources exercised system without extensive modifications kernel therefore based lessons learned first design proceeded design current version maruti changed implementation base cmu mach permitted direct control resources recently implemented maruti directly pc hardware providing maruti applications total control resources initial version distributed maruti also implemented allowing maruti applications run across network synchronized hard real time manner design goals design real time system must take consideration primary characteristics applications supported design maruti guided following application characteristics requirements real time requirements important requirement real time systems capability support timely execution applications contrast many existing systems next generation systems require support hard soft non real time applications platform fault tolerance many mission critical systems safety critical therefore fault tolerance requirements context fault tolerance ability system support continuous operation presence faults although number techniques supporting fault tolerant systems suggested literature rarely consider real time requirements system real time operating system must provide support fault tolerance exception handling capabilities increased reliability continuing satisfy timing requirements distributivity inherent characteristics many systems require multiple autonomous computers connected local area network cooperate distributed manner computers resources system may homogeneous heterogeneous due autonomous operation components cooperate system control coordination becomes much difficult task system implemented centralized manner techniques learned design implementation centralized systems always extend distributed systems straightforward manner scenarios many real time applications undergo different modes operation life cycle scenario defines set jobs executing system given time hard real time system must capable switching one scenario another maintaining system safe stable state times without violating timing constraints integration multiple requirements major challenge building operating systems mission critical computing integration multiple requirements conflicting nature requirements solutions developed date integration requirements single system formidable task example real time requirements preclude use many fault handling techniques used fault tolerant systems design approach principles maruti time based system resources reserved prior execution resource reservation done time line thus allowing reasoning real time properties natural way time driven architecture provides predictable execution real time systems necessary requirement critical applications requiring hard real time performance basic design approach outlined resource reservation hard real time jobs hard real time applications maruti advance resource reservation resulting priori guarantees timely execution hard real time jobs achieved calendar data structure keeps track resource reservations assigned time intervals resource requirements specified early possible development stage application manipulated analyzed refined phases application development predictability reduction resource contention hard real time jobs scheduled using time driven scheduling paradigm resource contention jobs eliminated scheduling results reduced run time overheads leads high degree predictability however jobs pre scheduled since resources may shared jobs calendar jobs system non real time activities may resource contention leading lack predictability countered eliminating much resource contention possible reducing whenever possible eliminate entirely lack predictability compensated allowing enough slack schedule integrated support fault tolerance fault tolerance objectives achieved integrating support fault tolerance levels system design fault tolerance supported early fault detection handling resilient application structures redundancy capability switch modes operation fault detection capabilities integrated application development permitting use application specific fault detection fault handling fault handling may result violation temporal constraints replication used make application resilient failure replica may affect timely execution replicas thereby operation system may controlling anticipated load failure conditions may become necessary system revoke guarantees given hard real time applications change mode operation dynamically acceptable degraded mode operation may continue separation mechanism policy design maruti emphasis placed separating mechanism policy thus instance system provides basic dispatching mechanisms time driven system keeping design specific scheduling policies separate approach followed aspects system separating mechanism policy system tailored optimized different environments portability extensibility unlike many real time systems aim maruti project develop system tailored use wide variety situations small embedded systems complex mission critical systems rapid change hardware technology imperative design portable different platforms makes minimal assumptions underlying hardware platform portability extensibility also enhanced using modular design well defined interfaces allows integration new techniques design relative ease support hard soft non real time environment many critical systems consist applications mix hard soft non real time requirements since may sharing data resources must execute within environment approach taken maruti support integrated execution applications multiple requirements reducing bounding unpredictable interaction support distributed operation many embedded systems need several processors carry computations multiple processors function autonomously use hard real time applications requires operating system support coordinated resource management maruti provides coordinated time based resource management resources distributed environment including processors communication channels support multiple execution environments maruti provides support multiple execution environments facilitate program development well execution real time applications may execute maruti mach maruti standalone environments maintain high degree temporal determinacy maruti standalone environment best suited embedded applications maruti mach permits concurrent execution hard real time non real time unix applications addition maruti virtual environment designed aid development real time applications environment code runs two environments execute access unix debugging tools available environment temporal accuracy maintained respect virtual real time support temporal debugging application executes maruti virtual environment interactions carried respect virtual real time control user user may speed respect actual time slow virtual time may paused instant debugging tools used examine state execution way may debug application maintaining temporal relationships process call temporal debugging principal investigators dr ashok agrawala dr satish tripathi research programmers jan morales current visitors dr v raghavan dr dheeraj sanghi graduate students mohamed said aboutabl ardas cilingiroglu seonho choi krishnan k kailas sung lee frank miller bao trinh recent alumni daniel mosse assistant professor university pittsburgh manas saksena assistant professor concordia university lafur gu mundsson trusted information systems nathan lewis microsoft corporation marat fayzullin aerospace engineering chia mei chen steve cheng shyhin hwang jan rizzuto loral bala srinivasan bell labs james da silva tracer technologies inc contact information dr ashok agrawala agrawala cs umd edu department computer science university maryland college park md u fax problems html document contact