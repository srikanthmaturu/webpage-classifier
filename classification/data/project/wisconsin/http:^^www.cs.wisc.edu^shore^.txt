date thu nov gmt server ncsa content type text html last modified tue aug gmt content length shore project home page shore high performance scalable persistent object repository document contents objective overview release information mailing lists see also shore version line information source binaries documentation beta release shore version publications related shore people working shore latest research summary arpa paradise project gis built shore exodus project predecessor shore oo benchmark benchmark oodbs shore photo album uw madison database research group uw madison cs department server objective objective shore project design implement evaluate persistent object system serve needs wide variety target applications including hardware software cad systems persistent programming languages geographic information systems satellite data repositories multi media applications shore expands basic capabilities widely used exodus storage manager developed wisconsin funded arpa number ways including support typed objects multiple programming languages unix like hierarchical name space named objects unix compatible interface objects text field interface intended ease transition applications unix file system environment shore existing unix tools vi cc able store data shore objects without modification basically unix file becomes either single shore object text field complex object overview shore something hybrid system nature inheriting characteristics object oriented database systems file systems section briefly describe basic features shore paper shoring persistent applications describes shore much greater detail shore three major goals scalability support hardware language heterogeneity support existing file based applications shore project began years ago goals unique among research commercial oodbms community odmg effort also concentrated providing degree support language heterogeneity turn facilitates hardware heterogeneity shore remains distinguished focus scalability support applications depend unix file system persistent storage furthermore since shore data model sdl basically compatible odmg data model odl expect much technology develop eventually transferred commercial sector scalable architecture shore software architecture unique several ways first shore uses symmetric peer peer distributed architecture shore every participating processor runs shore server process whether processor shore data disks attached software designed scalable run single processor network workstations large parallel processor intel paragon ibm sp design contrast client server architecture used exodus oodbms vendors client server architecture fine design environment typically used software hardware cad efforts scalable second unique feature shore architecture notion value added server structuring software runs server extensibility mind relatively simple users build application specific servers example paradise project already using shore server build geographic information system nasa eosdis project feel two unique pieces technology play important role variety future research commercial endeavors example digital libraries future almost certainly depend availability scalable persistent object technology systems going store retrieve manipulate transmit objects containing video pictures well text current oodbms products could used systems oriented toward dealing gigabytes terabytes data customizability equally important indexing retrieval query processing mechanisms needed digital library different required geographic information system language hardware heterogeneity objects shore typed shore provides single language neutral type system used define types shore objects type system embodied shore data language sdl language shore object types defined sdl enhances omg data model idl support database features bulk types e g sets lists persistence provision typed persistent objects simplifies task supporting heterogeneous hardware environments makes feasible support access persistent objects multiple programming languages key objective shore project mentioned earlier sdl quite closely related odl language neutral object type definition language recently proposed standard oodb vendor consortium odmg terms emphasis however odmg largely concentrated providing standardized interface existing c oriented oodbs focus support inter language object sharing within large name space objects support existing file based applications major goal shore enable applications currently use untyped byte oriented files persistent data flattening un flattening data time accessed stop applications able store data typed structured objects convenient type safe intra inter program data sharing ultimate hope shore displace byte oriented file systems unix file system shore provides two major services file system standpoint first support object naming space management world many persistent objects shore provides flexible tree structured unix like name space persistent objects reachable either directly indirectly gives shore users familiar framework register individual persistent objects termed registered objects roots large persistent data structures bulk sets unnamed objects termed anonymous objects realization framework involves several different kinds shore file system objects including directories pools files containing anonymous objects symbolic links cross references shore provides two mechanisms ease transition legacy unix applications compilers editors cad systems traditional byte stream files shore first applications re linked shore provides standard unix compatible file system interface e g open close read write mkdir chdir order make access shore objects via unix file system calls possible definer shore object type optionally designate one variable length byte string character string attribute object object unix data programs attempt read object shore counterparts unix file system calls see portion object legacy programs wish without re linked possible nfs mount shore file system access unix data contained objects directly makes feasible new old applications access set objects old applications access unix data component object new applications define access structured attributes object release information latest time table release shore dates approximate subject change questions contact shore support cs wisc edu beta release may first beta release beta release second beta rlease shore version available sept includes improved documentation complete implementations many sdl features many bug fixes ports solaris hp ux linux version august released shore version gzip d tar files source documentation binary release sparc pentium solaris found ftp ftp cs wisc edu shore mailing lists two shore related mailing lists shore support cs wisc edu shore cs wisc edu shore support cs wisc edu mailing list reaches shore development team use shore users submit questions comments bug reports us cannot subscribe mailing list shore cs wisc edu mailing list users interested shore list managed listproc software uw madison cs department currently unmoderated unlikely event gets cluttered junk mail moderate mail messages interested list mailbox already cluttered sign weekly digests see information information list sent subscribe purpose shore notifying interested parties new releases changes shore ftp archive requests help users default replies sent sender rather posted entire list want entire list see reply copy reply shore list public mailing list thus anyone may subscribe subscribers may post list existence list shown listing returned listproc processes lists request subscribe subscription concealed default subscribers cannot obtain membership list listproc system subscribing shore subscribe change subscription must mail special message listproc cs wisc edu subscribe content message look like subscribe shore receive weekly digests rather individual messages send along subscription send separate message set shore mail digest un subscribe content message unsubscribe shore get help list processor content message help last modified mon mar cst nancy hall nhall cs wisc edu footnotes compatibility odl shore odmg concurrently decided use omg data model idl starting point data models hence sdl odl similar one another odl stabilizes convert sdl compatible odl