date tue jan gmt server ncsa content type text html church project functional language using intersection types church project bibliography bibliography compilation books papers relevant project much bibliography derived www publication directories existing ml projects directories include fox project project crystal andrew appel home page ml kit selective snapshot projects taken august sml mailing list archive interesting discussions various aspects sml type theory r harper j mitchell type structure standard ml trans programming languages systems apr limits disadvantages ml type system universal quantifier polymorphism j kfoury j b wells direct algorithm type inference rank fragment second order lambda calculus proc acm conf lisp functional programming earlier version b u c technical report j kfoury j tiuryn p urzyczyn analysis ml typability j acm mar j kfoury j tiuryn p urzyczyn type reconstruction presence polymorphic recursion trans programming languages systems apr j b wells typability type checking second order lambda calculus equivalent undecidable proc th ann ieee symp logic computer science j kfoury j b wells adding polymorphic abstraction ml technical report comp sci dept boston univ l jategaonkar ml extended pattern matching subtypes master thesis mit j c mitchell meldal n madhav extension standard ml modules subtyping inheritance proc th acm symp principles programming languages pp jan various people extract recursive types mailing list archive reads bottom top benefits rank intersection types jim principal typings good technical report mit lcs tm mit jim rank type systems recursive definitions technical report mit lcs tm mit general background intersection types f cardone m coppo two extensions curry type inference system p odifreddi ed logic computer science academic press van bakel complete restrictions intersection type discipline theoretical computer science aug van bakel intersection type disciplines lambda calculus applicative term rewriting systems ph d thesis mathematisch centrum amsterdam jim forthcoming technical report higher rank intersection types background subtyping j c mitchell type inference simple subtypes j functional programming j mitchell polymorphic type inference containment information computation feb mar g longo k milsted soloviev logic subtyping proc th ann ieee symp logic computer science applications intersection types j c reynolds preliminary design programming language forsythe technical report cmu cs carnegie mellon university june freeman refinement types ml ph d dissertation carnegie mellon university b compagnoni b c pierce multiple inheritance via intersection types appear mscs earlier versions appeared edinburgh report ecs lfcs k u n report b c pierce intersection types bounded polymorphism appear mscs earlier version appeared proc typed lambda calculus applications mar general reading ml l c paulson ml working programmer cambridge university press reprinted j d ullman elements ml programming prentice hall r milner m tofte r harper definition standard ml mit press r milner m tofte r harper commentary definition standard ml mit press d macqueen reflections standard ml springer verlag lncs ml group ml manifesto unpublished draft w appel critique standard ml technical report tr princeton university dec appeared j functional programming r harper p lee advanced languages systems software fox project technical report cmu cs fox language features incomplete section contains references papers features ml problematic one way another ml type system module systems x leroy syntactic theory type generativity sharing appear j functional programming paper presents purely syntactic account type generativity sharing two key mechanisms standard ml module system shows equivalence traditional stamp based description mechanisms syntactic description recasts standard ml module system abstract type theoretic framework k biswas higher order functors transparent signatures proceedings nd acm sigplan sigact symposium principles programming languages pp jan d macqueen m tofte semantics higher order functors proc european symposium programming x leroy applicative functors fully transparent higher order modules proc principles programming languages present variant standard ml module system parameterized abstract types e functors returning generative types map provably equal arguments compatible abstract types instead generating distinct types application standard ml extension solves full transparency problem give syntactic signatures higher order functors express exactly propagation type equations also provides better support non closed code fragments r harper m lillibridge type theoretic approach higher order modules sharing technical report cmu cs fox version appeared proc st ann acm sigact sigplan symp principles programming languages jan separate compilation z shao w appel smartest recompilation technical report cs tr princeton univ appeared proc th acm symp principles programming languages jan x leroy manifest types modules separate compilation proc principles programming languages paper presents variant sml module system introduces strict distinction abstract types manifest types types whose definitions part module specification retaining expressive power sml module system resulting module system provides much better support separate compilation r harper p lee f pfenning e rollins incremental recompilation standard ml new jersey technical report cmu cs fox record types didier r records variants natural extension ml theoretical aspects object oriented programming types semantics language design mit press april carl gunter john c mitchell describe extension ml records inheritance given ml generic polymorphism common operations records concatenation supported particular free extension records operations renaming fields added solution relies extension ml language types sorted considered modulo equations record extension types solution simple modular type inference algorithm efficient practice bibtex reference didier r typing record concatenation free inria research report show functional language record extension possesses record concatenation free exhibit translation latter former obtain type system language record concatenation composing translation typechecking language record extension apply method version ml record extension obtain extension ml either asymmetric symmetric concatenation latter extension simple flexible efficient type inference algorithm practice concatenation together removal fields needs one construct extension records added version ml record extension however many typed languages record cannot type construct method still applies producing type systems record concatenation without removal fields object systems also benefit encoding shows multiple inheritance actually require concatenation records extension bibtex reference didier r case study typechecking constrained types typing record concatenation unpublished draft presented workshop advances type systems computing newton institute cambridge u k august may view abstract bibtex reference dvi file imperative features generalization exceptions control ml joint work carl gunter jon g riecke presented fpca san diego may view abstract bibtex reference dvi file may also retreive code appendix carl gunter didier r jon g riecke prompting ml unpublished draft january add functional continuations prompts language ml style type system operators significantly extend simplify control operators sml nj used implement simple exceptions prove well typed terms never produce run time type errors give module implementing latest version sml nj code appendix avalaible bibtex reference r harper b f duba d macqueen typing first class continuations ml j functional programming oct r harper simplified account polymorphic references information processing letters k yi compile time detection uncaught exceptions standard ml programs proc symp static analysis dynamic types m abadi l cardelli b c pierce d remy dynamic typing polymorphic languages x leroy m mauny dynamics ml j functional programming objects dynamic types allow integration operations essentially require run time type checking statically typed languages article presents two extensions ml language dynamics based work caml implementation ml discusses usefulness main novelty work combination dynamics polymorphism f henglein dynamic typing syntax proof theory science computer programming f henglein j j rgensen formally optimal boxing proceedings st acm sigplan sigact symposium principles programming languages pages overloading philip wadler stephen blott make ad hoc polymorphism less ad hoc proceedings st acm sigplan sigact symposium principles programming languages pages mark p jones qualified types theory practice cambridge university press november mark p jones simplifying improving qualified types proceedings conference functional programming computer architecture pages stefan kaes typing presence overloading subtyping recursive types proceedings conference lisp functional programming pages martin odersky philip wadler martin wehr second look overloading proceedings conference functional programming computer architecture pages geoffrey smith principal type schemes functional programs overloading subtyping science computer programming miscelaneous features e biagioni sequence types functional languages technical report cmu cs fox compiler architecture w appel compiling continuations cambridge university press l peyton jones implementation functional programming languages z shao compiling standard ml efficient execution modern machines ph d dissertation dept computer science princeton univ nov r kelsey correspondence continuation passing style static single assignment unpublished jan w appel d b macqueen standard ml new jersey technical report cs tr princeton univ appeared third int l symp programming language implementation logic programming vol lncs pp springer verlag aug z shao w appel type based compiler standard ml cs tr princeton university march appears proc acm conf programming language design implementation sigplan notices pp june amr sabry essence compiling continuations proc programming language design implementation x leroy zinc experiment economical implementation ml language technical report inria report details design implementation zinc system experimental implementation ml language later evolved caml light system system strongly oriented toward separate compilation production small standalone programs type safety ensured modula like module system zinc uses simple portable techniques bytecode interpretation sophisticated execution model helps counterbalance interpretation overhead n bj rner minimal typing derivations record acm sigplan workshop ml applications program representation optimization analysis w appel jim continuation passing closure passing style appeared proc th acm symp principles programming languages pp jan z shao w appel space efficient closure representations technical report cs tr princeton univ appeared proc acm conf lisp functional programming june y minamide g morrisett r harper typed closure conversion technical report cmu cs fox r cytron j ferrante b k rosen m n wegman f k zadeck efficiently computing static single assignment form control dependence graph trans programming languages systems oct c hall using hindley milner type inference optimize list representation proc acm conf lisp functional programming z shao j h reppy w appel unrolling lists technical report cs tr princeton univ appeared proc acm conf lisp functional programming june control data flow analysis n heintz set based analysis ml programs technical report cmu cs fox c colby p lee trace based program analysis technical report cmu cs fox see also slides talk trace based analysis f henglein c mossin polymorphic binding time analysis proceedings european symposium programming d sannella ed pp volume lecture notes computer science springer verlag april keywords binding time analysis polymorphism polymorphic recursion summary polymorphic binding time analysis polymorphic recursion proposed alternative polyvariant binding time analysis type system proven principal typing property analysis proven correct partially complete unfolding definition cannot improve results analysis pointers dvi z sabry m felleisen continuation passing useful data flow analysis technical report rice univ another version appears proc programming language design implementation register allocation w appel z shao callee save registers continuation passing style technical report cs tr princeton univ appeared lisp symbolic computation p briggs k d cooper l torczon improvements graph coloring register allocation trans programming languages systems may l george w appel iterated register coalescing technical report cs tr princeton univ aug boxing x leroy unboxed objects polymorphic typing proc principles programming languages paper presents program transformation allows languages polymorphic typing e g ml implemented unboxed multi word data representations efficient conventional boxed representations transformation introduces coercions various representations based typing derivation prototype ml compiler utilizing transformation demonstrates important speedups fritz henglein jasper j rgensen formally optimal boxing proceedings st acm sigplan sigact symposium principles programming languages pages r harper g morrisett compiling polymorphism using intensional type analysis technical report cmu cs fox run time systems m tofte j p talpin implementation typed call value lambda calculus using stack regions proc st ann acm sigplan sigact symp principles programming languages aiken et al better static memory management improving region based analysis higher order languages proc programming language design implementation also available expanded page technical report m j r goncalves w appel cache performance fast allocating programs proc th int l conf functional programming computer architecture pp acm press june andrew w appel runtime system lisp symbolic computation w appel z shao empirical analytic study stack vs heap cost languages closures technical report cs tr princeton univ mar revised version appear j functional programming d tarditi diwan e moss memory subsystem performance programs using copying garbage collection technical report cmu cs fox appeared proc st ann acm sigact sigplan symp principles programming languages d tarditi diwan e moss memory subsystem performance programs intensive heap allocation technical report cmu cs fox p fradet collecting garbage proc acm conf lisp functional programming w appel runtime tags aren necessary technical report cs tr princeton univ mar appeared lisp symbolic computation july miscellaneous compiler related papers andrew w appel axiomatic bootstrapping guide compiler hackers technical report cs tr princeton univ mar appeared record acm sigplan workshop ml applications revised version diagrams appears trans programming languages systems nov r harper p lee f pfenning e rollins compilation manager standard ml new jersey record acm sigplan workshop ml applications probably closely related paper group n haines e biagioni r harper b g milnes note conditional compilation standard ml technical report cmu cs fox d tarditi p lee acharya assembly required compiling standard ml c letters programming languages systems june correct optimal lambda calculus evaluation gonthier abadi l vy geometry optimal lambda reduction gonthier abadi l vy linear logic without boxes lawall mairson optimality inefficiency isn cost model lambda calculus lawall mairson global dynamics optimal graph reduction