date tue dec gmt server ncsa content type text html zpl program walk zpl program walk though zpl new powerful array language users languages c fortran pascal etc find quite intuitive brief introduction therefore looking sample program perhaps fastest introduction zpl accompanying zpl program solves jacobi computation jacobi given array iteratively replace elements average four nearest neighbors largest change two consecutive iterations less delta example two dimensional array program generate data initialized except southern boundary set constant positions tolerance delta jacobi program jacobi config var n integer declarations delta float region r n n direction north south east west procedure jacobi entry point var temp r float err float begin r initialization north r east r west r south r r repeat main body temp north east west south err max abs temp temp err figure zpl program jacobi computation quick skim jacobi program shows organized pretty much like programs declarations lines starting point executable part computation line initialization array lines iteration loop compute result lines result output line quick look also reveals assignment written rather c fortran every statement terminated semicolon comments starting extend end line comment brackets main thing unconventional zpl computes whole arrays rather individual array elements thus line r sets entire array zero indexing looping r specifies region assigned case compare similar computations expressed languages must manipulate individual elements fortran c pascal n even fortran another array language cumbersome required range specification n n fortran concepts like regions explained momentarily simplify zpl programmer think abstractly leave low level details like indexing looping language shown performance lost convenience jacobi program explained following might convenient clone window keep copy program visible thorough introduction zpl found zpl programmer guide regions declarations fundamental concept zpl notion region region simply set indices example line region r n n specifies standard indices n x n array e set ordered pairs n n regions used declare arrays means array defined indices thus line var temp r float declares two n x n array variables temp composed floating point numbers called real languages indices given region r final variable declaration line err float mention region err declared simple scalar variable program next declares set four directions directions used transform regions expression north r line vectors many elements region dimensions four direction declarations lines direction north south east west point unit distance four cardinal compass directions figures illustrate transformations region r using directions initializations regions also allow zpl computations extended operate entire arrays without explicit looping prefixing statement region specifier simply region name brackets operations statement applied elements array thus line r assigns n elements array indices r since many scientific problems boundary conditions region specifier used augment arrays boundaries extending array boundaries initializing values role next four lines lines north r east r west r south r region specifier d r defines index set region adjacent r d direction statement applied elements region thus north r defines index set th row assignment initializes elements successive effects initialization statements illustrated figure figure definition initialization boundaries program body declarations initialization completed programming jacobi computation simple repeat loop iterates condition becomes true three statements compute new approximation averaging elements line determine largest amount change new iteration line update new iteration line statements executed context r region since repeat statement prefixed r region specifier statements operate follows averaging averaging illustrates explicit array indexing avoided zpl referring adjacent array elements using operator statement line temp north east west south finds element average four nearest neighbors assigns result temp expression d executed context region r results array size shape r composed elements offset direction d illustrated figure d thought adding d index equivalently case shifting figure references boundaries executed context region specifier covering dots shown correspond element shifted arrays four arrays combined elementwise yielding effect computing element j sum four nearest neighbors seen following identities j north j north j j j east j east j j j west j west j j j south j south j j elements divided result stored temp maximum finding compute largest change element current next iteration line elementwise array operations performed bold subexpression err max abs temp causes elements temp subtracted corresponding elements absolute value element found e abs temp abs temp abs n n temp n n computes magnitude change elements find largest among maximum reduction max performed operation reduces entire array largest element maximum assigned err scalar variable controls loop update final statement loop line temp simply installs temp current value performance although zpl program written high level relieves programmer many tedious details necessary give performance convenience jacobi program hand coded c customized two representative parallel computers intel paragon kendall square research ksr results shown accompanying graph demonstrate problem least zpl efficient low level programming solution figure speedup jacobi program iterations n kendall square research ksr intel paragon c program handcoded machine zpl programs perform well higher level array concepts easier compiler analyze understand means zpl compiler frequently successful finding opportunities optimize program summary jacobi program illustrates fundamental properties zpl computations performed whole arrays avoiding error prone indexing tedious looping global operations like finding maximum element array provided language primitives general zpl high level array concepts simply programmer task allow compiler produce efficient code zpl therefore ideal array based scientific engineering computations require high performance zpl uw cse uw zpl info cs washington edu