date tue dec gmt server ncsa content type text html zpl papers manuals zpl papers manuals zpl specific papers manuals language description papers zpl array sublanguage august introduction zpl language old somewhat date zpl programming guide july intuitive introduction language walks several scientific programming examples zpl language reference manual draft june complete description language includes index implementation papers factor join unique approach compiling array languages parallel machines may framework compiling array languages implementation machine independent array language november implementation zpl benchmark performance evaluation papers zpl vs hpf comparison performance programming style may compares zpl hpf using set nas nasa genesis benchmark programs simple performance results zpl august performance comparisons hand coded programs real world applications zpl portable parallel n body solver describes zpl used solve n body solver portable parallel implementation two novel mathematical biology algorithms zpl july describes zpl used solve two mathematical biology problems foundations zpl machine model papers type architecture shared memory corollary modest potential discusses need accurate abstract machine models developing efficient algorithms introduces cta abstract machine model programming models shared vs nonshared memory models comparison programming models shared memory multiprocessors empirical comparison shared memory non shared memory programming models effect performance programs shared memory multiprocessors comparison shared nonshared memory models parallel computation theoretical comparison shared memory non shared memory programming models influence parallel algorithm performance influence programming models shared memory computer performance experimental comparsion shared memory non shared memory programming models three machines two applications lu decomposition water programming models abstractions zpl formerly orca c scalable abstractions parallel programming introduces notion ensembles provides scalability flexible communication abstraction nonshared memory parallel computing november introduces notion port ensembles separates specification communication computation abstractions portable scalable parallel programming december extensive discussion phase abstractions programming model foundations practical parallel programming languages describes relation zpl orca c describes underlying models languages portable implementation simple detailed description simple cfd benchmark written orca c optimized interprocessor communication quantifying effects communication optimizations may evaluation communication optimizations ironman architecture independent communication interface parallel computers march machine independent interface custom interprocessor communication miscellany accommodating polymorphic data decompositions explicitly parallel programs april message passing libraries alone sufficient portability zpl uw cse uw zpl info cs washington edu