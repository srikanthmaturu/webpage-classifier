date tue dec gmt server ncsa content type text html uw dc prototype dynamic compilation prototype phased compilation compilation strategy code compilation process completed stages traditional static compile time link time load time demand run time delaying portion compilation process take advantage information available later stages primary goal phased compilation generate better code thereby improving performation contrast incremental compilation primary goal reduce compilation time especially recompilation time portion compilation postponed run time called dynamic compilation profs susan eggers craig chambers several students make university washington dynamic compilation group focusing optimizing code performance run time using information available run time particular currently considering value based specialization two separate compilers involved model dynamic compilation static compiler dynamic compiler static compiler compiles code outside regions code dynamically compiled called dynamic regions partially compiles otherwise prepares dynamic regions compiled run time dynamic compiler uses partially compiled dynamic regions information generated static compiler generate executable code dynamic regions prototype dynamic compilation system designed built joel auslander matthai philipose enhanced multiflow compiler act static compiler built dynamic compiler automatically invoked run time dynamic regions identified programmer set source code annotations dynamic region programmer also specifies variables region specialized new version region compiled run time set values variables beginning dynamic region furthermore annotated variables must invariant throughout dynamic region called run time constants static compiler automatically identifies values region derived programmer specified set run time constants considered run time constants used basis specialization well particular arguments arithmetic operation comparison even memory load compile time run time constants result assumed run time constant static compiler splits dynamic region two pieces code set code machine code templates set code includes computations region depend directly indirectly solely compile time run time constants machine code templates include computations region depend least part run time varying data references machine code templates run time constants cannot resolved static compile time since values determined run time therefore machine code templates contain holes place values static compiler also outputs series directives dynamic compiler indicate turn machine code templates correct executable code given static values computed set code run time dynamic region first entered dynamic compiler invoked dynamic compiler first executes region set code calculate values run time constants executes directives selecting copying desired machine code templates filling holes based values computed set code produce final optimized machine code dynamic region machine code run continue program execution future executions dynamic region run time constant values generated machine code executed directly without invoking dynamic compiler set code generally time spent optimizing code run time higher quality code generated however time spent optimizing code run time must recovered speedups gained optimizations desirable make dynamic compiler fast possible still achieving significant benefits optimizations dynamic compiler manipulates nearly compiled templates designed fast even perform number optimizations thus producing fast code dynamic compiler complete constant propagation folding planned static compiler eliminate memory loads run time constants perform peephole optimizations based values remove branches determine fully unroll loops bound full unrolling loop causes loop induction variables become run time constants within iteration creating opportunities optimization however even dynamic compiler fast code generated efficient code dynamically compiled generally executed many times order recoup cost dynamic compilation enhanced performance reason regions code specialized run time variables dynamic compiler specialize must carefully selected much improvement achieved dynamically compiling annotated region annotated run time constants take new values frequently performance worse purely statically compiled code selecting dynamic regions run time constants delicate task elected use annotations prototype rather selecting regions run time constants automatically detailed information prototype please see pldi paper last updated august brian grant grant cs washington edu