mime version server cern date tuesday jan gmt content type text html content length last modified wednesday dec gmt ssgrg publications page publications following list publications research group largely listed order publication date entry consists citation abstract hypertext link actual paper related web pages utcs general ssgrg title page ssgrg project index guillermo jimenez perez batory memory simulators software generators appear symposium software reuse present results re engineering highly tuned hand coded memory simulator using p container data structure generator application chosen synthesizing simulator data structures would exploit p primary advantage automatically applying sophisticated code optimization techniques thus initially believed using p would overkill p generated code would provide performance advantages hand coding contrary found p produced efficient code offered significant advantages software development previously realized batory bart j geraci composition validation subjectivity genvoca generators appear ieee transactions software engineering special issue software reuse genvoca generators synthesize software systems composing components reuse libraries genvoca components designed export import standardized interfaces thus plug compatible interchangeable interoperable components paper examine two different important issues software system synthesis first syntactically correct compositions components semantically correct present simple efficient domain independent algorithms validating compositions genvoca components second components export import immutable interfaces restrictive software system synthesis show interfaces bodies genvoca components subjective e mutate enlarge upon instantiation mutability enables software systems customized interfaces composed components standardized interfaces vivek p singhal programming language writing domain specific software system generators ph d dissertation department computer sciences university texas austin september automating routine programming tasks effective way increase productivity software development software system generators potential achieve goal customized software systems quickly easily assembled component libraries research demonstrates generators successful component libraries must scalable scalability enables libraries small components library implement distinct largely orthogonal features components combined yield enormous family software systems subsystems generators thus become tools combining components manufacture systems subsystems genvoca programming model forms foundation research components act large scale refinements simultaneously transform multiple classes one abstraction another genvoca advocates novel style program organization little language tool support paradigm developed programming language called p extends c specialized constructs support genvoca model permits components treated transformations simultaneously refine several classes consistent manner validate utility language solved challenge problem software reuse reimplemented booch c components data structures library scalable p library able reduce volume code number components approximately factor four without compromising performance generated systems e e villarreal batory rosetta generator data language compilers appear symposium software reuse also technical report tr department computer sciences university texas austin april data language declarative language enables database users access manipulate data families related data languages family member targeted particular application unfortunately building compilers languages largely ad hoc process tools design methods allow programmers leverage design code compilers similar languages simplify evolution existing languages include features rosetta generator relational data language compilers demonstrates practical solutions problems explain domain analysis identifies primitive building blocks compilers grammar based definitions e g genvoca legal compositions blocks yields compact easily evolvable specifications data languages rosetta automatically transforms specifications compilers experiences rosetta discussed dinesh das batory synthesizing rule sets query optimizers components technical report tr department computer sciences university texas austin april query optimizers complex subsystems database management systems modifying query optimizers admit new algorithms storage structures quite difficult partly alleviated extensible approaches optimizer construction rule based optimizers step direction experience rule sets optimizers rather monolithic brittle conceptually minor changes often require wholesale modifications rule set consequently much done improve extensibility rule based optimizers remedy present tool called prairie based algebra layered optimizers algebra naturally leads building blocks approach rule set construction defining customized rule sets evolving previously defined rule sets accomplished composing building blocks explain implementation prairie present experimental results show classical relational optimizers synthesized building blocks efficiency query optimization sacrificed batory software system generators transformation systems compilers working paper october genvoca generators assemble customized high performance software systems automatically components paper explain genvoca generators actually compilers domain specific module interconnection languages underlying compilation technology special class transformation systems batory software component technologies space applications proceedings international conference integrated micro nano technology space applications november near future software systems reconfigurable hardware possible advent software component technologies prototyped universities research labs paper outline foundations technologies suggest might impact software space applications lance tokuda program transformations evolving software architectures oopsla position paper workshop adaptable adaptive software software evolution often driven need extend existing software design patterns express preferred ways extend object oriented software provide desirable target states software designs paper demonstrates design patterns expressed series parameterized program transformations applied plausible initial software state software tool proposed uses primitive transformations allow users evolve object oriented applications visually altering design diagrams batory subjectivity genvoca generators proceedings international conference software reuse orlando see ieee tse journal version expanded technical report tr department computer sciences university texas austin june tenet subjectivity single interface adequately describe object interfaces object vary among different applications thus objects standardized interfaces seem brittle concept meet demands wide variety applications yet objects standardized interfaces central idea domain modeling software generation standard interfaces make objects plug compatible interchangeable feature exploited generators synthesize high performance domain specific software systems interestingly generated systems customized interfaces quite different interfaces constituent objects paper reconcile apparent contradiction showing objects components genvoca model software generation typical software modules interfaces bodies mutate upon instantiation standard application dependent batory issues domain modeling software system generation oopsla position paper panel objects domain engineering batory jeff thomas p lightweight dbms generator technical report tr department computer sciences university texas austin june lightweight database system lwdb high performance application specific dbms differs general purpose heavyweight dbms omits one features specializes implementation features maximize performance although heavyweight monolithic extensible dbmss might able emulate lwdb capabilities cannot match lwdb performance paper describe p generator lightweight dbmss explain used reengineer hand coded highly tuned lwdb used production system compiler leaps present results show p generated lwdbs reduced development time code size leaps factor three generated lwdbs executed substantially faster versions built hand using extensible heavy weight dbms dinesh das making database optimizers extensible ph d dissertation department computer sciences university texas austin may query optimizers fundamental components database management systems dbmss optimizer consists three features search space cost model search strategy experience many researchers shown hard wiring features results optimizer inflexible difficult modify rule based optimizers developed alleviate problems monolithic optimizers unfortunately contemporary rule based optimizers provide enough support enable database implementers dbi fully realize potential open systems identified four requirements rule based optimizer satisfy address needs first rules specified using high level abstractions insulating dbi underlying implementation details second rule sets easily extensible minimum reprogramming required third rule sets easily reconfigurable changeable meet variety user needs interfaces database schemes etc fourth rule based optimizers fast performance sacrificed sake high level specifications dissertation describe prairie environment specifying rules rule based optimizers satisfies four requirements prairie specification language presented show allows dbi design easily extensible rule set rule based optimizer experimental results presented using texas instruments open odd optimizer rule set validate claim good performance using prairie finally building blocks approach constructing rule sets presented results easily reconfigurable rule sets whose features changeable simply assembling blocks various ways batory lou coglianese mark goodwill steve shaver creating reference architectures example avionics proceedings symposium software reusability seattle washington april adage project define build domain specific software architecture dssa environment assisting development avionics software central concept dssa use software system generators implement component based models software synthesis target domain paper present adage component based model reference architecture avionics software synthesis explain modeling procedures used review initial goals examine able accomplish contributions paper lessons learned may beneficial others future modeling efforts batory lou coglianese steve shafer tracz adage avionics reference architecture aiaa computing aerospace conference san antonio march adage project define build domain specific software architecture dssa environment avionics central concept adage use generators implement scalable component based models avionics software paper review adage model reference architecture avionics software describe techniques avionics software synthesis dinesh das batory prairie rule specification framework query optimizers proceedings th international conference data engineering taipei march experience current rule based query optimizers provide intuitive well defined framework define rules actions remedy situation propose extensible structured algebraic framework called prairie specifying rules prairie facilitates rule writing enabling user write rules actions quickly correctly easy understand easy debug manner query optimizers consist three major parts search space cost model search strategy approach take develop algebra defines search space cost model use volcano optimizer generator search engine using prairie front end translate prairie rules volcano validate claim prairie makes easier write rules describe algebra present experimental results show using high level framework like prairie design large scale optimizers sacrifice efficiency batory david mcallester lou coglianese tracz domain modeling engineering computer based systems proceedings international symposium workshop systems engineering computer based systems tucson arizona february domain modeling believed key factor developing economical scalable means constructing families related software systems paper review current state domain modeling present work adage project integrated environment relies heavily domain models generating real time avionics applications specifically explain detect errors design avionics systems expressed terms compositions components also offer insights domain modeling benefit engineering computer based systems domains lance tokuda batory automated software evolution via design pattern transformations proceedings rd international symposium applied corporate computing monterrey mexico october also tr department computer sciences university texas austin february software evolution often driven need extend existing software design patterns express preferred ways extend object oriented software provide desirable target states software designs paper demonstrates design patterns expressed series parameterized program transformations applied plausible initial software state software tool proposed uses primitive transformations allow users evolve object oriented applications visually altering design diagrams jeff thomas batory p extensible lightweight dbms technical report tr department computer sciences university texas austin february lightweight database system lwdb high performance application specific dbms differs general purpose heavyweight dbms omits one features specializes implementation features maximize performance although heavyweight monolithic extensible dbmss might able emulate lwdb capabilities cannot match lwdb performance paper explore lwdb applications systems implementation techniques describe p extensible lightweight dbms explain used reengineer hand coded highly tuned lwdb used production system compiler leaps present results show p generated lwdbs leaps executes substantially faster versions built hand use extensible heavyweight dbms batory bart j geraci validating component compositions software system generators proceedings international conference software reuse orlando see ieee tse journal version also expanded technical report tr department computer sciences university texas austin june generators synthesize software systems composing components reuse libraries general syntactically correct compositions semantically correct paper present domain independent algorithms genvoca model software generators validate component compositions work relies attribute grammars offers powerful debugging capabilities explanation based error reporting illustrate approach showing compositions debugged genvoca generator container data structures batory jeff thomas marty sirkin reengineering complex application using scalable data structure compiler proceedings acm sigsoft conference new orleans december p scalable compiler collection data structures high level abstractions insulate p users data structure implementation details specifying target data structure composition components reuse library p compiler replaces abstract operations concrete implementations leaps production system compiler produces fastest sequential executables ops rule sets leaps hand written highly tuned performance driven application relies complex data structures reengineering leaps using p acid test evaluate p scalability productivity benefits generated code performance paper present experimental results experiences reengineering exercise show p scaled complex application substantially increased productivity provided unexpected performance gains emilia e villarreal automated compiler generation extensible data languages ph d dissertation department computer sciences university texas austin december meet changing needs dbms community e g support new database applications geographic temporal databases new data languages frequently proposed offer extensions previously defined languages sql quel ever implemented maturity area data languages demands researchers go beyond proposal stage hands experience languages separate good ideas bad tools methodologies building families similar languages definitely needed solve problem automating generation compilers data languages work rosetta based two concepts first underlying domain data languages common backplane relational operations backplane operations primitive building blocks language execution construction building block standardized semantics definition well designed backplane implementation independent backplane defined used model arbitrarily many data languages second exist primitive building blocks language construction analysis database data language domain identified three classes building blocks one class maps language syntax backplane functions another builds internal representation backplane operator tree third class manages contextual information modeling data languages define rosetta specification language grammar based specification language tailored needs power define syntax map target language build operator tree one rule thus rule microcosmic model language clause encapsulates input parsing code generation specification language models data languages based composition primitive building blocks semantics customization syntax invoking compositions compiler data language generated first modeling language compiling specification ease efficiency rosetta customizes languages derives reuse backplane operations high level specification supported batory leaps algorithms technical report tr department computer sciences university texas austin november leaps state art production system compiler produces fastest sequential executable ops rule sets performance leaps due reliance complex data structures search algorithms speed rule processing paper explain leaps algorithms terms programming abstractions p data structure compiler batory bart geraci jeff thomas introductory p system manual technical report tr department computer sciences university texas austin november p prototype container data structure precompiler superset c language offering container cursor abstractions part linguistic extensions c p based genvoca model software system generators document users manual programming p language batory bart geraci jeff thomas advanced p system manual technical report tr department computer sciences university texas austin november manual documents layers written p special language xp designed specifically defining p building blocks e primitive data structure layers batory vivek singhal jeff thomas sankar dasari bart geraci marty sirkin genvoca model software system generators ieee software september emerging breed generators synthesize complex software systems libraries reusable components generators called genvoca generators produce high performance software offer substantial increases productivity batory products domain models proceedings arpa domain modeling workshop george mason university september argue domain models produce four basic products identification reusable software components definition software architectures explain components composed demonstration architecture scalability direct relationship results software generation target systems martin j sirkin software system generator data structures ph d dissertation department computer science engineering university washington march although data structures fundamental part applications using writing data structures time consuming difficult error prone programmers often select inappropriate data structures applications know data structure use know implement particular data structure existing implementation data structure use dissertation describes model technology overcoming problems approach based non traditional parameterized types npts npts extension traditional parameterized types tpts already familiar programmers npts based genvoca domain modeling concepts vertical parameterization consistent high level interface transformational compiler research led construction software system generator data structures called predator predator able transform data structure declarations data structure independent functions efficient code predator also allows programmers adjust data structure implementation simply changing declaration recompiling dissertation discusses model differs standard models predator compiler results validation efforts batory vivek singhal jeff thomas marty sirkin scalable software libraries proceedings acm sigsoft conference los angeles december many software libraries e g booch c components libg nihcl cool provide components classes implement data structures component written hand represents unique combination features e g concurrency data structure memory allocation algorithms distinguishes components argue way building data structure component libraries inherently unscalable libraries enumerate complex components numerous features rather libraries take minimalist approach provide primitive building blocks accompanied generators combine blocks yield complex custom data structures paper describe prototype data structure generator building blocks populate library also present preliminary experimental results suggest approach compromise programmer productivity run time performance generated data structures vivek singhal batory p language software system generators technical report tr department computer sciences university texas austin november p programming language supports genvoca model particular style software design intended building software system generators p enhanced version c offers linguistic extensions component encapsulation abstraction parameterization inheritance component suite interrelated classes functions paper describes motivations p ideas underlie design syntax features language related areas research jeff thomas batory vivek singhal marty sirkin scalable approach software libraries proceedings th annual workshop software reuse owego new york november software libraries offer convenient accessible means achieve benefits reuse components libraries written hand represents unique combination features distinguishes components unfortunately number features grows size libraries grows exponentially making unscalable predator research project develop abstractions tools provide benefits software libraries without incurring scalability disadvantages mentioned approach relies careful analysis application domain arrive appropriate high level abstractions standardized e plug compatible interfaces layered decompositions predator defines language extensions implementing components compilers automatically convert component compositions efficient programs vivek singhal batory p language large scale reusable software components proceedings th annual workshop software reuse owego new york november p programming language supports genvoca model particular style software design intended building software system generators p enhanced version c offers linguistic extensions component encapsulation abstraction parameterization inheritance component subsystem e suite interrelated classes functions marty sirkin predator data structure compiler manual describing features syntax p prototype data structure compiler unpublished marty sirkin batory vivek singhal software components data structure precompiler proceedings th international conference software engineering baltimore md may pages predator data structure precompiler generates efficient code maintaining querying complex data structures embodies novel component reuse technology transcends traditional generic data types paper explain concepts work prototype system show complex data structures specified compositions software building blocks present performance results compare predator output hand optimized programs batory vivek singhal jeff thomas database challenge single schema database management systems technical report tr department computer sciences university texas austin december many data intensive applications require high performance data management facilities utilize small fraction power general purpose database system dbms believe single schema database systems ssts e special purpose dbmss designed single schema predeclared set database operations vital need today software industry challenge create technology economically building high performance ssts sst research combine results object oriented databases persistent object stores module interconnection languages rule based optimizers open architecture systems extensible databases generic data types batory sean o malley design implementation hierarchical software systems reusable components acm transactions software engineering methodology october present domain independent model hierarchical software system design construction based interchangeable software components large scale reuse model unifies conceptualizations two independent projects genesis avoca successful examples software component building block technologies domain modeling building block technologies exploit large scale reuse rely open architecture software elevate granularity programming subsystem level domain modeling formalizes similarities differences among systems domain believe model blue print achieving software component technologies many domains batory vivek singhal marty sirkin implementing domain model data structures international journal software engineering knowledge engineering september present model data structure domain expressed terms genvoca domain modeling concepts show familiar data structures encapsulated realms plug compatible symmetric reusable components show complex data structures formed composition target application research precompiler specifying generating customized data structures last modified december batory batory cs utexas edu